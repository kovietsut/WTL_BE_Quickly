// <auto-generated />
using System;
using Domain.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AuthMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("AccessTokenExpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AuthType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__AuthMeth__3214EC078CF7B1CD");

                    b.HasIndex("UserId");

                    b.ToTable("AuthMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthId = "phuc123@gmail.com",
                            AuthType = "Email",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsRevoked = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AuthId = "john.reader@gmail.com",
                            AuthType = "Email",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsRevoked = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AuthId = "sarah.author@gmail.com",
                            AuthType = "Email",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsRevoked = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("HasComment")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NovelContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatusChapter")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Chapters__3214EC07F52585A5");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Domain.Entities.ChapterImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FileSize")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__ChapterI__3214EC07E2B6F532");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ChapterImages");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("bit");

                    b.Property<long?>("MangaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Comments__3214EC07CE8527B9");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MangaId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.CommentReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__CommentR__3214EC072CADC68D");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Featured__3214EC0736CEA38B");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("FeaturedCollections");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollectionManga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FeaturedCollectionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MangaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Featured__3214EC07A35C926C");

                    b.HasIndex("FeaturedCollectionId");

                    b.HasIndex("MangaId");

                    b.ToTable("FeaturedCollectionMangas");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollectionPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FeaturedCollectionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Featured__3214EC07DA4FFC3C");

                    b.HasIndex("FeaturedCollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("FeaturedCollectionPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Genere", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Generes__3214EC07C42CC74C");

                    b.ToTable("Generes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Action",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Adventure",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Comedy",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Drama",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Fantasy",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Horror",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Romance",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Sci-Fi",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.Manga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("Artist")
                        .HasColumnType("bigint");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("Format")
                        .HasColumnType("int");

                    b.Property<bool?>("HasAdult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Preface")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Publishor")
                        .HasColumnType("bigint");

                    b.Property<int?>("Region")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseStatus")
                        .HasColumnType("int");

                    b.Property<long?>("SubAuthor")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("Translator")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Mangas__3214EC07903C34BB");

                    b.HasIndex("Artist");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Publishor");

                    b.HasIndex("SubAuthor");

                    b.HasIndex("Translator");

                    b.ToTable("Mangas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 1,
                            HasAdult = false,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "Follow Monkey D. Luffy and his pirate crew in their search for the ultimate treasure, the One Piece.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 3,
                            ReleaseStatus = 2,
                            Title = "One Piece",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 1,
                            HasAdult = true,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "Humanity lives inside cities surrounded by enormous walls due to the Titans, gigantic humanoid creatures who devour humans seemingly without reason.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 3,
                            ReleaseStatus = 1,
                            Title = "Attack on Titan",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 2,
                            HasAdult = false,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "In a world where hunters must battle deadly monsters to protect the human race from certain annihilation, Sung Jin-Woo is the weakest hunter of all mankind.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 4,
                            ReleaseStatus = 1,
                            Title = "Solo Leveling",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 1,
                            HasAdult = true,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "Tanjiro Kamado's peaceful life is shattered when his family is slaughtered by demons. His sister Nezuko is turned into a demon, but still shows signs of human emotion and thought.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 3,
                            ReleaseStatus = 1,
                            Title = "Demon Slayer",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 2,
                            HasAdult = false,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "The story follows Twenty-Fifth Bam, who has spent most of his life trapped beneath a mysterious tower, with only his close friend Rachel to keep him company.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 4,
                            ReleaseStatus = 1,
                            Title = "Tower of God",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 2,
                            HasAdult = false,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "In a world where 80% of the population has some kind of super-powered Quirk, Izuku Midoriya was unlucky to be born completely normal.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 3,
                            ReleaseStatus = 2,
                            Title = "My Hero Academia",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 1,
                            HasAdult = false,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "King Grey has unrivaled strength, wealth, and prestige in a world governed by martial ability. However, solitude lingers closely behind those with great power.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 4,
                            ReleaseStatus = 2,
                            Title = "The Beginning After The End",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 2,
                            HasAdult = true,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "Yuji Itadori is a boy with tremendous physical strength, though living a normal life. One day, to save a friend who has been attacked by curses, he eats a finger of Ryomen Sukuna.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 3,
                            ReleaseStatus = 2,
                            Title = "Jujutsu Kaisen",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 1,
                            HasAdult = false,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "Jin Mori is a 17-year-old high school student who participates in a fighting tournament called 'The God of High School' to grant his grandfather's wish.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 4,
                            ReleaseStatus = 2,
                            Title = "The God of High School",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 2,
                            HasAdult = true,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "Denji's life of poverty changes forever when he merges with his pet chainsaw devil to become a hybrid devil-human.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 3,
                            ReleaseStatus = 1,
                            Title = "Chainsaw Man",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11L,
                            CoverImage = "https://webtruyenloofficial.blob.core.windows.net/test/876c1396-4246-466d-8b40-1d1da0011d299999aapple.jpg?sv=2025-01-05&st=2025-03-29T17%3A11%3A10Z&se=2025-03-29T17%3A41%3A10Z&sr=b&sp=r&sig=ELsnGOzTXn508ogExJ6f4mQ79dwOxeEcTPi3elR4v4s%3D",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1L,
                            Format = 1,
                            HasAdult = false,
                            IsDeleted = false,
                            ModifiedBy = 1L,
                            Preface = "Kim Dokja is the only person who knows the ending of a novel called 'Three Ways to Survive the Apocalypse'. When the novel becomes reality, he must use his knowledge to survive.",
                            PublishedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Region = 4,
                            ReleaseStatus = 2,
                            Title = "Omniscient Reader",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.MangaGenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MangaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__MangaGen__3214EC077172674E");

                    b.HasIndex("GenreId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaGenres");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            GenreId = 2L,
                            IsDeleted = false,
                            MangaId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            GenreId = 3L,
                            IsDeleted = false,
                            MangaId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            GenreId = 4L,
                            IsDeleted = false,
                            MangaId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            GenreId = 6L,
                            IsDeleted = false,
                            MangaId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            GenreId = 5L,
                            IsDeleted = false,
                            MangaId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            GenreId = 8L,
                            IsDeleted = false,
                            MangaId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 4L
                        },
                        new
                        {
                            Id = 11L,
                            GenreId = 5L,
                            IsDeleted = false,
                            MangaId = 4L
                        },
                        new
                        {
                            Id = 12L,
                            GenreId = 6L,
                            IsDeleted = false,
                            MangaId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            GenreId = 2L,
                            IsDeleted = false,
                            MangaId = 5L
                        },
                        new
                        {
                            Id = 15L,
                            GenreId = 5L,
                            IsDeleted = false,
                            MangaId = 5L
                        },
                        new
                        {
                            Id = 16L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            GenreId = 3L,
                            IsDeleted = false,
                            MangaId = 6L
                        },
                        new
                        {
                            Id = 18L,
                            GenreId = 8L,
                            IsDeleted = false,
                            MangaId = 6L
                        },
                        new
                        {
                            Id = 19L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 7L
                        },
                        new
                        {
                            Id = 20L,
                            GenreId = 5L,
                            IsDeleted = false,
                            MangaId = 7L
                        },
                        new
                        {
                            Id = 21L,
                            GenreId = 7L,
                            IsDeleted = false,
                            MangaId = 7L
                        },
                        new
                        {
                            Id = 22L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 8L
                        },
                        new
                        {
                            Id = 23L,
                            GenreId = 5L,
                            IsDeleted = false,
                            MangaId = 8L
                        },
                        new
                        {
                            Id = 24L,
                            GenreId = 6L,
                            IsDeleted = false,
                            MangaId = 8L
                        },
                        new
                        {
                            Id = 25L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 9L
                        },
                        new
                        {
                            Id = 26L,
                            GenreId = 2L,
                            IsDeleted = false,
                            MangaId = 9L
                        },
                        new
                        {
                            Id = 27L,
                            GenreId = 3L,
                            IsDeleted = false,
                            MangaId = 9L
                        },
                        new
                        {
                            Id = 28L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 10L
                        },
                        new
                        {
                            Id = 29L,
                            GenreId = 6L,
                            IsDeleted = false,
                            MangaId = 10L
                        },
                        new
                        {
                            Id = 30L,
                            GenreId = 8L,
                            IsDeleted = false,
                            MangaId = 10L
                        },
                        new
                        {
                            Id = 31L,
                            GenreId = 1L,
                            IsDeleted = false,
                            MangaId = 11L
                        },
                        new
                        {
                            Id = 32L,
                            GenreId = 4L,
                            IsDeleted = false,
                            MangaId = 11L
                        },
                        new
                        {
                            Id = 33L,
                            GenreId = 8L,
                            IsDeleted = false,
                            MangaId = 11L
                        });
                });

            modelBuilder.Entity("Domain.Entities.MangaInteraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("InteractionType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MangaId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__MangaInt__3214EC075D87671E");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MangaId");

                    b.HasIndex("UserId");

                    b.ToTable("MangaInteractions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3214EC07CE933FCB");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Admin",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Reader",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Author",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC0768201A46");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D1053495D01949")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "phuc123@gmail.com",
                            FullName = "Phuc Lo",
                            IsDeleted = false,
                            PasswordHash = "nld7cvF70f2JNhIOie8Wy1/VZza04zDXmZ8BtGjFBBE=",
                            RoleId = 1L,
                            SecurityStamp = "d6a69959-ab31-4653-a52d-299e0174503e",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "john.reader@gmail.com",
                            FullName = "John Reader",
                            IsDeleted = false,
                            PasswordHash = "nld7cvF70f2JNhIOie8Wy1/VZza04zDXmZ8BtGjFBBE=",
                            RoleId = 2L,
                            SecurityStamp = "d6a69959-ab31-4653-a52d-299e0174503e",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sarah.author@gmail.com",
                            FullName = "Sarah Author",
                            IsDeleted = false,
                            PasswordHash = "nld7cvF70f2JNhIOie8Wy1/VZza04zDXmZ8BtGjFBBE=",
                            RoleId = 3L,
                            SecurityStamp = "d6a69959-ab31-4653-a52d-299e0174503e",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.AuthMethod", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("AuthMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__AuthMetho__UserI__49C3F6B7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("ChapterCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Chapters__Create__22751F6C");

                    b.HasOne("Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("ChapterModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK__Chapters__Modifi__236943A5");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ChapterImage", b =>
                {
                    b.HasOne("Domain.Entities.Chapter", "Chapter")
                        .WithMany("ChapterImages")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK__ChapterIm__Chapt__2A164134");

                    b.HasOne("Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("ChapterImageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__ChapterIm__Creat__282DF8C2");

                    b.HasOne("Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("ChapterImageModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK__ChapterIm__Modif__29221CFB");

                    b.Navigation("Chapter");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Chapter", "Chapter")
                        .WithMany("Comments")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK_Comments_ChapterId");

                    b.HasOne("Domain.Entities.Manga", "Manga")
                        .WithMany("Comments")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Comments__MangaI__0E6E26BF");

                    b.HasOne("Domain.Entities.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK__Comments__Parent__0F624AF8");

                    b.Navigation("Chapter");

                    b.Navigation("Manga");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Domain.Entities.CommentReaction", b =>
                {
                    b.HasOne("Domain.Entities.Comment", "Comment")
                        .WithMany("CommentReactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CommentRe__Comme__14270015");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("CommentReactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CommentRe__UserI__151B244E");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollection", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("FeaturedCollectionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__FeaturedC__Creat__6754599E");

                    b.HasOne("Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("FeaturedCollectionModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK__FeaturedC__Modif__68487DD7");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollectionManga", b =>
                {
                    b.HasOne("Domain.Entities.FeaturedCollection", "FeaturedCollection")
                        .WithMany("FeaturedCollectionMangas")
                        .HasForeignKey("FeaturedCollectionId")
                        .IsRequired()
                        .HasConstraintName("FK__FeaturedC__Featu__6EF57B66");

                    b.HasOne("Domain.Entities.Manga", "Manga")
                        .WithMany("FeaturedCollectionMangas")
                        .HasForeignKey("MangaId")
                        .IsRequired()
                        .HasConstraintName("FK__FeaturedC__Manga__6E01572D");

                    b.Navigation("FeaturedCollection");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollectionPermission", b =>
                {
                    b.HasOne("Domain.Entities.FeaturedCollection", "FeaturedCollection")
                        .WithMany("FeaturedCollectionPermissions")
                        .HasForeignKey("FeaturedCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__FeaturedC__Featu__6D0D32F4");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("FeaturedCollectionPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__FeaturedC__UserI__6C190EBB");

                    b.Navigation("FeaturedCollection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Manga", b =>
                {
                    b.HasOne("Domain.Entities.User", "ArtistNavigation")
                        .WithMany("MangaArtistNavigations")
                        .HasForeignKey("Artist")
                        .HasConstraintName("FK_Mangas_Artist");

                    b.HasOne("Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("MangaCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Mangas_CreatedBy");

                    b.HasOne("Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("MangaModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Mangas_ModifiedBy");

                    b.HasOne("Domain.Entities.User", "PublishorNavigation")
                        .WithMany("MangaPublishorNavigations")
                        .HasForeignKey("Publishor")
                        .HasConstraintName("FK_Mangas_Publishor");

                    b.HasOne("Domain.Entities.User", "SubAuthorNavigation")
                        .WithMany("MangaSubAuthorNavigations")
                        .HasForeignKey("SubAuthor")
                        .HasConstraintName("FK_Mangas_SubAuthor");

                    b.HasOne("Domain.Entities.User", "TranslatorNavigation")
                        .WithMany("MangaTranslatorNavigations")
                        .HasForeignKey("Translator")
                        .HasConstraintName("FK_Mangas_Translator");

                    b.Navigation("ArtistNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("PublishorNavigation");

                    b.Navigation("SubAuthorNavigation");

                    b.Navigation("TranslatorNavigation");
                });

            modelBuilder.Entity("Domain.Entities.MangaGenre", b =>
                {
                    b.HasOne("Domain.Entities.Genere", "Genre")
                        .WithMany("MangaGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__MangaGenr__Genre__60A75C0F");

                    b.HasOne("Domain.Entities.Manga", "Manga")
                        .WithMany("MangaGenres")
                        .HasForeignKey("MangaId")
                        .IsRequired()
                        .HasConstraintName("FK__MangaGenr__Manga__5FB337D6");

                    b.Navigation("Genre");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Domain.Entities.MangaInteraction", b =>
                {
                    b.HasOne("Domain.Entities.Chapter", "Chapter")
                        .WithMany("MangaInteractions")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK__MangaInte__Chapt__32AB8735");

                    b.HasOne("Domain.Entities.Manga", "Manga")
                        .WithMany("MangaInteractions")
                        .HasForeignKey("MangaId")
                        .HasConstraintName("FK__MangaInte__Manga__31B762FC");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("MangaInteractions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__MangaInte__UserI__30C33EC3");

                    b.Navigation("Chapter");

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__4222D4EF");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.Navigation("ChapterImages");

                    b.Navigation("Comments");

                    b.Navigation("MangaInteractions");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Navigation("CommentReactions");

                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollection", b =>
                {
                    b.Navigation("FeaturedCollectionMangas");

                    b.Navigation("FeaturedCollectionPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Genere", b =>
                {
                    b.Navigation("MangaGenres");
                });

            modelBuilder.Entity("Domain.Entities.Manga", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FeaturedCollectionMangas");

                    b.Navigation("MangaGenres");

                    b.Navigation("MangaInteractions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("AuthMethods");

                    b.Navigation("ChapterCreatedByNavigations");

                    b.Navigation("ChapterImageCreatedByNavigations");

                    b.Navigation("ChapterImageModifiedByNavigations");

                    b.Navigation("ChapterModifiedByNavigations");

                    b.Navigation("CommentReactions");

                    b.Navigation("FeaturedCollectionCreatedByNavigations");

                    b.Navigation("FeaturedCollectionModifiedByNavigations");

                    b.Navigation("FeaturedCollectionPermissions");

                    b.Navigation("MangaArtistNavigations");

                    b.Navigation("MangaCreatedByNavigations");

                    b.Navigation("MangaInteractions");

                    b.Navigation("MangaModifiedByNavigations");

                    b.Navigation("MangaPublishorNavigations");

                    b.Navigation("MangaSubAuthorNavigations");

                    b.Navigation("MangaTranslatorNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
