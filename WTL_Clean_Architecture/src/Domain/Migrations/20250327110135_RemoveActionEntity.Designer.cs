// <auto-generated />
using System;
using Domain.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Persistence.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250327110135_RemoveActionEntity")]
    partial class RemoveActionEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AuthMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("AccessTokenExpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AuthType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__AuthMeth__3214EC078CF7B1CD");

                    b.HasIndex("UserId");

                    b.ToTable("AuthMethods");
                });

            modelBuilder.Entity("Domain.Entities.FeaturedCollectionPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FeaturedCollectionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MangaId")
                        .HasColumnType("bigint");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Featured__3214EC07DA4FFC3C");

                    b.HasIndex("FeaturedCollectionId");

                    b.HasIndex("MangaId");

                    b.HasIndex("UserId");

                    b.ToTable("FeaturedCollectionPermissions");
                });

            // ... rest of the entities ...

            modelBuilder.Entity("Domain.Entities.FeaturedCollectionPermission", b =>
                {
                    b.HasOne("Domain.Entities.FeaturedCollection", "FeaturedCollection")
                        .WithMany("FeaturedCollectionPermissions")
                        .HasForeignKey("FeaturedCollectionId")
                        .HasConstraintName("FK__FeaturedC__Featu__7C4F7684");

                    b.HasOne("Domain.Entities.Manga", "Manga")
                        .WithMany("FeaturedCollectionPermissions")
                        .HasForeignKey("MangaId")
                        .HasConstraintName("FK__FeaturedC__Manga__7B5B524B");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("FeaturedCollectionPermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__FeaturedC__UserI__7D439ABD");

                    b.Navigation("FeaturedCollection");

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            // ... rest of the relationships ...
        }
    }
} 